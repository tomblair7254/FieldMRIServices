@page "/ComputerInventory"
@attribute [Authorize]

@using Syncfusion.Blazor
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Notifications
@using System.Net
@using Microsoft.AspNetCore.Identity
@using System.IO
@using SixLabors.ImageSharp;
@using SixLabors.ImageSharp.Formats.Webp;
@using SixLabors.ImageSharp.Processing;
@using System.Security.Claims
@using System.Text.RegularExpressions
@using FieldMRIServices.Comparers

@inject NavigationManager NavigationManager
@inject IComputerService ComputerService
@inject IUserLogsService UserLogsService
@inject UserManager<IdentityUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject RoleManager<ApplicationRoles> RoleManager
@inject IJSRuntime JS

<div>
    <h3 class="text-center text-4xl font-excon">FMS Computer Inventory</h3>
    <div>
        <h6 style="background-color:#B4E380;width:150px;margin-top:-40px;margin-left:80px;">Green Good</h6>
        <h6 style="background-color:#F6FB7A; width:160px;margin-left:80px;"> Need Repair/Testing</h6>
        <h6 style="background-color:#FF6969;width:160px ;margin-left:80px;">Red Bad</h6>
    </div>

    <div class="flex flex-col justify-center m-0 py-12">

        <SfGrid @ref="SfComputerGrid" ID="SfComputerGrid" DataSource="computerData" AllowTextWrap="true" AllowPaging="true" AllowExcelExport="true" AllowPdfExport="true" EnableStickyHeader ="true" AllowFreezeLineMoving="true" AllowSorting="true" AllowFiltering="false" GridLines="GridLine.Both" AllowResizing="true"  AllowMultiSorting="true" Toolbar="@toolbar">
            <GridSearchSettings IgnoreCase="true"></GridSearchSettings>

            <GridEditSettings Mode="EditMode.Normal" AllowAdding="true" ShowDeleteConfirmDialog="true" AllowEditing="true" AllowDeleting="true">
                <HeaderTemplate>
                    <span>@(GetDialogHeaderText(context as ComputerModel))</span>
                </HeaderTemplate>

                <FooterTemplate>
                    <SfButton OnClick="@Save" IsPrimary="true">Save</SfButton>
                    <SfButton OnClick="@Cancel">Cancel</SfButton>
                </FooterTemplate>
            </GridEditSettings>



            <GridSortSettings>
                <GridSortColumns>
                    <GridSortColumn Field="@nameof(ComputerModel.Id)" Direction="SortDirection.Descending"></GridSortColumn>
                </GridSortColumns>
            </GridSortSettings>
            <GridSelectionSettings Mode="Syncfusion.Blazor.Grids.SelectionMode.Both" Type="Syncfusion.Blazor.Grids.SelectionType.Multiple"></GridSelectionSettings>

            <GridEvents DataBound="DataBoundHandler" Searching="BeforeSearchHandler" OnToolbarClick="TooBarBtnClickHandler" OnActionBegin="ActionBeginHandler" TValue="ComputerModel" QueryCellInfo="CustomizeCell" RowDataBound="CustomizeRow" RowSelected="OnRowSelected" CellSelected="CellSelectedHandler"></GridEvents>

            <GridSelectionSettings Mode="Syncfusion.Blazor.Grids.SelectionMode.Both" Type="Syncfusion.Blazor.Grids.SelectionType.Multiple"></GridSelectionSettings>
            <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>

            <GridPageSettings PageSize="10"></GridPageSettings>

            <GridColumns>
                <GridColumn HeaderText="#" AllowAdding="false" IsPrimaryKey="true" Field="@nameof(ComputerModel.Id)" Width="70px" AllowFiltering="false">
                </GridColumn>
        <GridColumn Visible="false" Field="@nameof(ComputerModel.InventoryNumber)" SortComparer="new InventoryNumberComparer()" Width="50px">
                 @*  <EditTemplate Context="context">
                        @if (context is ComputerModel computer)
              {
              <div class="flex flex-col space-y-4 flex-wrap">
                <SfTextBox TValue="string" @bind-Value="computer.InventoryNumber"></SfTextBox>
              </div>
            } 
          </EditTemplate> *@
        </GridColumn>
        <GridColumn Field="@nameof(ComputerModel.ImagePaths)" HeaderText="IMAGE" Width="230px" AllowFiltering="false" AllowSearching="false">
          <Template>
            @{
              var computerModel = context as ComputerModel;
              var imageUrls = computerModel?.ImagePaths ?? new List<string>();
            }
            <div class="flex space-x-4">
              @if (imageUrls.Count == 0)
              {
                <span class="font-alpino text-base font-light">No Images Have been Uploaded.</span>
              }
              else
              {
                @foreach (var imageUrl in imageUrls)
                {
                  <div class="image">
                    <img class="w-12 h-12" src="@imageUrl" alt=""/>
                  </div>
                }
                <button @onclick="@(async () => OpenCarousel(imageUrls.ToArray()))" class=""><i class="fa-solid fa-expand text-indigo-600 text-md hover:scale-110 ease-in transition-all duration-300"></i></button>
              }
            </div>
          </Template>

          <EditTemplate>
            <div class="flex flex-col py-4 space-y-4">
              @{
                var computerModel = context as ComputerModel;
                var imageUrls = computerModel?.ImagePaths ?? new List<string>();
              }
              <div class="flex justify-center items-center space-x-4">
                @if (imageUrls.Count > 0)
                {
                  @foreach (var imageUrl in imageUrls)
                  {
                    <div class="flex flex-col justify-center items-center space-y-2">
                      <img class="w-12 h-12 @(selectedImageUrl == imageUrl ? "border border-red-500" : "")" alt="product-image" src="@imageUrl" @onclick="@(async () => ToggleImageSelection(imageUrl))" />
                      <button type="button" @onclick="@(async () => await RemoveImage(imageUrl, computerModel))">
                        <i class="fa-solid fa-xmark text-blue-500 text-lg hover:scale-105 ease-in transition-all duration-300"></i>
                      </button>
                    </div>
                  }
                }
                else
                {
                  <p>No images uploaded</p>
                }
              </div>
              @if (imageUrls.Count >= 3)
              {
                <p class="text-xs flex flex-wrap text-red-500">You can only upload up to 3 images. <br> Please delete existing images before <br> adding new ones.</p>
              }
              else
              {
                <SfUploader ID="uploadFiles" AllowedExtensions=".jpg,.png,.jpeg" Multiple="false" MaxFileSize="10485760" @ref="Uploader">
                  <UploaderEvents ValueChange="@(args => CloudinaryImageUpload(args, computerModel))"></UploaderEvents>
                </SfUploader>
                <p class="text-xs font-alpino font-light text-gray-500">Max file size: 10MB</p>
                <SfDropDownList TValue="string" TItem="string" Placeholder="Cell color" DataSource="@color" @bind-Value="computerModel.SelectedImagecolor">
                  <DropDownListFieldSettings Value="color" Text="Text"></DropDownListFieldSettings>
                </SfDropDownList>
              }
            </div>
          </EditTemplate>
        </GridColumn>

        <GridColumn HeaderText="Manufacturer & Description" Field="@nameof(ComputerModel.ComputerNameFirstPart)" Width="250px">
          <EditTemplate Context="context">
            @if (context is ComputerModel computer)
            {
              <div class="flex-column flex-col space-y-4 flex-wrap">
                <SfTextBox Tvalue="string" @bind-Value="computer.ComputerNameFirstPart"></SfTextBox>
                <SfDropDownList TValue="string" TItem="string" Placeholder="Cell color" DataSource="@color" @bind-Value="computer.SelectedComputerNamecolor">
                  <DropDownListFieldSettings Value="color" Text="Text"></DropDownListFieldSettings>
                </SfDropDownList>
              </div>
            }
          </EditTemplate>
        </GridColumn>

        <GridColumn HeaderText="PN, SN, MODEL, ITEM #" Field="@nameof(ComputerModel.PinFirstPart)" Width="220px">
          <Template>

            @{
              string fullText = (context as ComputerModel).PinFirstPart;

              // Match the date pattern (assuming date is in yyyy-MM-dd format)
              var datePattern = @"(\d{1,2}/\d{1,2}/\d{2}|SN|MODEL|ITEM #)";
              var matches = Regex.Matches(fullText, datePattern);


              if (matches.Count > 0)
              {

                var lastIndex = 0; // To keep track of where we are in the string

                <div>
                  @foreach (Match match in matches)
                  {

                    // Get the part before the current match

                    var beforeDate = fullText.Substring(lastIndex, match.Index - lastIndex);



                    // Display the text before the date
                    @beforeDate
                    <br />
                    // Display the date as bold and add a line break after each date
                    <strong>@match.Value</strong>


                    // Update the last index to the end of the current match

                    lastIndex = match.Index + match.Length;
                  }


                  @fullText.Substring(lastIndex)
                </div>
              }
              else
              {

                // No date found, just display the text as-is
                <div>@fullText</div>
              }
            }
          </Template>
          <EditTemplate Context="context">
            @if (context is ComputerModel computer)
            {
              <div class="flex flex-col space-y-4 flex-wrap">
                <SfTextBox TValue="string" @bind-Value="computer.PinFirstPart"></SfTextBox>
                <SfDropDownList TValue="string" TItem="string" Placeholder="Cell color" DataSource="@color" @bind-Value="computer.SelectedPincolor">
                  <DropDownListFieldSettings Value="color" Text="Text"></DropDownListFieldSettings>
                </SfDropDownList>
              </div>
            }
          </EditTemplate>
        </GridColumn>

        <GridColumn HeaderText="Location" Field="@nameof(ComputerModel.LocationFirstPart)" Width="250px">
          <EditTemplate Context="context">
            @if (context is ComputerModel computer)
            {
              <div class="flex flex-col space-y-4 flex-wrap">
                <SfTextBox TValue="string" @bind-Value="computer.LocationFirstPart"></SfTextBox>
                <SfDropDownList TValue="string" TItem="string" Placeholder="Cell color" DataSource="@color" @bind-Value="computer.SelectedLocationcolor">
                  <DropDownListFieldSettings Value="color" Text="Text"></DropDownListFieldSettings>
                </SfDropDownList>
              </div>
            }
          </EditTemplate>
        </GridColumn>

                <GridColumn HeaderText="FMS #" Field="@nameof(ComputerModel.FMSFirstPart)" Width="120px">
                    <EditTemplate Context="context">
                        @if (context is ComputerModel computer)
                        {
                            <div class="flex flex-col space-y-4 flex-wrap">
                                <SfTextBox TValue="string" @bind-Value="computer.FMSFirstPart"></SfTextBox>
                                <SfDropDownList TValue="string" TItem="string" Placeholder="Cell color" DataSource="@color" @bind-Value="computer.SelectedFMScolor">
                                    <DropDownListFieldSettings Value="color" Text="Text"></DropDownListFieldSettings>
                                </SfDropDownList>
                            </div>
                        }
                    </EditTemplate>
                </GridColumn>

        <GridColumn HeaderText="Qty" Field="@nameof(ComputerModel.QtyFirstPart)" Width="100px">
          <EditTemplate Context="context">
            @if (context is ComputerModel computer)
            {
              <div class="flex flex-col space-y-4 flex-wrap">
                <SfTextBox TValue="string" @bind-Value="computer.QtyFirstPart"></SfTextBox>
                <SfDropDownList TValue="string" TItem="string" Placeholder="Cell color" DataSource="@color" @bind-Value="computer.SelectedQtycolor">
                  <DropDownListFieldSettings Value="color" Text="Text"></DropDownListFieldSettings>
                </SfDropDownList>
              </div>
            }
          </EditTemplate>
        </GridColumn>

        <GridColumn HeaderText="Tag" Field="@nameof(ComputerModel.TagFirstPart)" Width="100px">
          <EditTemplate Context="context">
            @if (context is ComputerModel computer)
            {
              <div class="flex flex-col space-y-4 flex-wrap">
                <SfTextBox TValue="string" @bind-Value="computer.TagFirstPart"></SfTextBox>
                <SfDropDownList TValue="string" TItem="string" Placeholder="Cell color" DataSource="@color" @bind-Value="computer.SelectedTagcolor">
                  <DropDownListFieldSettings Value="color" Text="Text"></DropDownListFieldSettings>
                </SfDropDownList>
                <SfDropDownList TValue="string" TItem="string" Placeholder="Tag scope" DataSource="@scope" @bind-Value="computer.SelectedTagScope">
                  <DropDownListFieldSettings Value="scope" Text="Text"></DropDownListFieldSettings>
                </SfDropDownList>
              </div>
            }
          </EditTemplate>
        </GridColumn>

                <GridColumn HeaderText="Windows" Field="@nameof(ComputerModel.WindowsFirstPart)" Width="120px">
                    <EditTemplate Context="context">
                        @if (context is ComputerModel computer)
                        {
                            <div class="flex flex-col space-y-4 flex-wrap">
                                <SfTextBox TValue="string" @bind-Value="computer.WindowsFirstPart"></SfTextBox>
                                <SfDropDownList TValue="string" TItem="string" Placeholder="Cell color" DataSource="@color" @bind-Value="computer.SelectedWindowsrcolor">
                                    <DropDownListFieldSettings Value="color" Text="Text"></DropDownListFieldSettings>
                                </SfDropDownList>
                            </div>
                        }
                    </EditTemplate>
                </GridColumn>

                <GridColumn HeaderText="Medical Software" Field="@nameof(ComputerModel.SoftwareFirstPart)" Width="120px">
                    <EditTemplate Context="context">
                        @if (context is ComputerModel computer)
                        {
                            <div class="flex flex-col space-y-4 flex-wrap">
                                <SfTextBox TValue="string" @bind-Value="computer.SoftwareFirstPart"></SfTextBox>
                                <SfDropDownList TValue="string" TItem="string" Placeholder="Cell color" DataSource="@color" @bind-Value="computer.SelectedSoftwarecolor">
                                    <DropDownListFieldSettings Value="color" Text="Text"></DropDownListFieldSettings>
                                </SfDropDownList>
                            </div>
                        }
                    </EditTemplate>
                </GridColumn>

                <GridColumn HeaderText="Medical Version" Field="@nameof(ComputerModel.VersionFirstPart)" Width="120px">
                    <EditTemplate Context="context">
                        @if (context is ComputerModel computer)
                        {
                            <div class="flex flex-col space-y-4 flex-wrap">
                                <SfTextBox TValue="string" @bind-Value="computer.VersionFirstPart"></SfTextBox>
                                <SfDropDownList TValue="string" TItem="string" Placeholder="Cell color" DataSource="@color" @bind-Value="computer.SelectedVersioncolor">
                                    <DropDownListFieldSettings Value="color" Text="Text"></DropDownListFieldSettings>
                                </SfDropDownList>
                            </div>
                        }
                    </EditTemplate>
                </GridColumn>

                <GridColumn HeaderText="Hard Drive" Field="@nameof(ComputerModel.HardDriveFirstPart)" Width="120px">
                    <EditTemplate Context="context">
                        @if (context is ComputerModel computer)
                        {
                            <div class="flex flex-col space-y-4 flex-wrap">
                                <SfTextBox TValue="string" @bind-Value="computer.HardDriveFirstPart"></SfTextBox>
                                <SfDropDownList TValue="string" TItem="string" Placeholder="Cell color" DataSource="@color" @bind-Value="computer.SelectedHardDrivecolor">
                                    <DropDownListFieldSettings Value="color" Text="Text"></DropDownListFieldSettings>
                                </SfDropDownList>
                            </div>
                        }
                    </EditTemplate>
                </GridColumn>

                <GridColumn HeaderText="Video" Field="@nameof(ComputerModel.VideoFirstPart)" Width="120px">
          <EditTemplate Context="context">
            @if (context is ComputerModel computer)
            {
              <div class="flex flex-col space-y-4 flex-wrap">
                <SfTextBox TValue="string" @bind-Value="computer.VideoFirstPart"></SfTextBox>
                <SfDropDownList TValue="string" TItem="string" Placeholder="Cell color" DataSource="@color" @bind-Value="computer.SelectedVideocolor">
                  <DropDownListFieldSettings Value="color" Text="Text"></DropDownListFieldSettings>
                </SfDropDownList>
              </div>
            }
          </EditTemplate>
        </GridColumn>

                <GridColumn HeaderText="Serial Port" Field="@nameof(ComputerModel.CommFirstPart)" Width="120px">
                    <EditTemplate Context="context">
                        @if (context is ComputerModel computer)
                        {
                            <div class="flex flex-col space-y-4 flex-wrap">
                                <SfTextBox TValue="string" @bind-Value="computer.CommFirstPart"></SfTextBox>
                                <SfDropDownList TValue="string" TItem="string" Placeholder="Cell color" DataSource="@color" @bind-Value="computer.SelectedCommcolor">
                                    <DropDownListFieldSettings Value="color" Text="Text"></DropDownListFieldSettings>
                                </SfDropDownList>
                            </div>
                        }
                    </EditTemplate>
                </GridColumn>

                <GridColumn HeaderText="USB" Field="@nameof(ComputerModel.UsbFirstPart)" Width="120px">
                    <EditTemplate Context="context">
                        @if (context is ComputerModel computer)
                        {
                            <div class="flex flex-col space-y-4 flex-wrap">
                                <SfTextBox TValue="string" @bind-Value="computer.UsbFirstPart"></SfTextBox>
                                <SfDropDownList TValue="string" TItem="string" Placeholder="Cell color" DataSource="@color" @bind-Value="computer.SelectedUsbcolor">
                                    <DropDownListFieldSettings Value="color" Text="Text"></DropDownListFieldSettings>
                                </SfDropDownList>
                            </div>
                        }
                    </EditTemplate>
                </GridColumn>

                <GridColumn HeaderText="Network" Field="@nameof(ComputerModel.NetworkFirstPart)" Width="120px">
                    <EditTemplate Context="context">
                        @if (context is ComputerModel computer)
                        {
                            <div class="flex flex-col space-y-4 flex-wrap">
                                <SfTextBox TValue="string" @bind-Value="computer.NetworkFirstPart"></SfTextBox>
                                <SfDropDownList TValue="string" TItem="string" Placeholder="Cell color" DataSource="@color" @bind-Value="computer.SelectedNetworkcolor">
                                    <DropDownListFieldSettings Value="color" Text="Text"></DropDownListFieldSettings>
                                </SfDropDownList>
                            </div>
                        }
                    </EditTemplate>
                </GridColumn>

                <GridColumn HeaderText="DVD" Field="@nameof(ComputerModel.PlayerFirstPart)" Width="120px">
                    <EditTemplate Context="context">
                        @if (context is ComputerModel computer)
                        {
                            <div class="flex flex-col space-y-4 flex-wrap">
                                <SfTextBox TValue="string" @bind-Value="computer.PlayerFirstPart"></SfTextBox>
                                <SfDropDownList TValue="string" TItem="string" Placeholder="Cell color" DataSource="@color" @bind-Value="computer.SelectedPlayercolor">
                                    <DropDownListFieldSettings Value="color" Text="Text"></DropDownListFieldSettings>
                                </SfDropDownList>
                            </div>
                        }
                    </EditTemplate>
                </GridColumn>

                <GridColumn HeaderText="Memory" Field="@nameof(ComputerModel.MemoryFirstPart)" Width="120px">
                    <EditTemplate Context="context">
                        @if (context is ComputerModel computer)
                        {
                            <div class="flex flex-col space-y-4 flex-wrap">
                                <SfTextBox TValue="string" @bind-Value="computer.MemoryFirstPart"></SfTextBox>
                                <SfDropDownList TValue="string" TItem="string" Placeholder="Cell color" DataSource="@color" @bind-Value="computer.SelectedMemorycolor">
                                    <DropDownListFieldSettings Value="color" Text="Text"></DropDownListFieldSettings>
                                </SfDropDownList>
                            </div>
                        }
                    </EditTemplate>
                </GridColumn>

                <GridColumn HeaderText="Processors" Field="@nameof(ComputerModel.ProcessorsFirstPart)" Width="150px">
                    <EditTemplate Context="context">
                        @if (context is ComputerModel computer)
                        {
                            <div class="flex-column flex-col space-y-4 flex-wrap">
                                <SfTextBox Tvalue="string" @bind-Value="computer.ProcessorsFirstPart"></SfTextBox>
                                <SfDropDownList TValue="string" TItem="string" Placeholder="Cell color" DataSource="@color" @bind-Value="computer.SelectedProcessorscolor">
                                    <DropDownListFieldSettings Value="color" Text="Text"></DropDownListFieldSettings>
                                </SfDropDownList>
                            </div>
                        }
                    </EditTemplate>
                </GridColumn>

        <GridColumn HeaderText="Monitor" Field="@nameof(ComputerModel.MonitorFirstPart)" Width="120px">
          <EditTemplate Context="context">
            @if (context is ComputerModel computer)
            {
              <div class="flex flex-col space-y-4 flex-wrap">
                <SfTextBox TValue="string" @bind-Value="computer.MonitorFirstPart"></SfTextBox>
                <SfDropDownList TValue="string" TItem="string" Placeholder="Cell color" DataSource="@color" @bind-Value="computer.SelectedMonitorcolor">
                  <DropDownListFieldSettings Value="color" Text="Text"></DropDownListFieldSettings>
                </SfDropDownList>
              </div>
            }
          </EditTemplate>
        </GridColumn>

        <GridColumn HeaderText="Modisk" Field="@nameof(ComputerModel.ModiskFirstPart)" Width="120px">
          <EditTemplate Context="context">
            @if (context is ComputerModel computer)
            {
              <div class="flex flex-col space-y-4 flex-wrap">
                <SfTextBox TValue="string" @bind-Value="computer.ModiskFirstPart"></SfTextBox>
                <SfDropDownList TValue="string" TItem="string" Placeholder="Cell color" DataSource="@color" @bind-Value="computer.SelectedModiskcolor">
                  <DropDownListFieldSettings Value="color" Text="Text"></DropDownListFieldSettings>
                </SfDropDownList>
              </div>
            }
          </EditTemplate>
        </GridColumn>

        <GridColumn HeaderText="Fiber" Field="@nameof(ComputerModel.FiberFirstPart)" Width="120px">
          <EditTemplate Context="context">
            @if (context is ComputerModel computer)
            {
              <div class="flex flex-col space-y-4 flex-wrap">
                <SfTextBox TValue="string" @bind-Value="computer.FiberFirstPart"></SfTextBox>
                <SfDropDownList TValue="string" TItem="string" Placeholder="Cell color" DataSource="@color" @bind-Value="computer.SelectedFibercolor">
                  <DropDownListFieldSettings Value="color" Text="Text"></DropDownListFieldSettings>
                </SfDropDownList>
              </div>
            }
          </EditTemplate>
        </GridColumn>

        <GridColumn HeaderText="IEEE" Field="@nameof(ComputerModel.IEEEFirstPart)" Width="120px">
          <EditTemplate Context="context">
            @if (context is ComputerModel computer)
            {
              <div class="flex flex-col space-y-4 flex-wrap">
                <SfTextBox TValue="string" @bind-Value="computer.IEEEFirstPart"></SfTextBox>
                <SfDropDownList TValue="string" TItem="string" Placeholder="Cell color" DataSource="@color" @bind-Value="computer.SelectedIEEEcolor">
                  <DropDownListFieldSettings Value="color" Text="Text"></DropDownListFieldSettings>
                </SfDropDownList>
              </div>
            }
          </EditTemplate>
        </GridColumn>

        <GridColumn HeaderText="SAS Raid" Field="@nameof(ComputerModel.SASRaidFirstPart)" Width="120px">
          <EditTemplate Context="context">
            @if (context is ComputerModel computer)
            {
              <div class="flex flex-col space-y-4 flex-wrap">
                <SfTextBox TValue="string" @bind-Value="computer.SASRaidFirstPart"></SfTextBox>
                <SfDropDownList TValue="string" TItem="string" Placeholder="Cell color" DataSource="@color" @bind-Value="computer.SelectedSASRaidcolor">
                  <DropDownListFieldSettings Value="color" Text="Text"></DropDownListFieldSettings>
                </SfDropDownList>
              </div>
            }
          </EditTemplate>
        </GridColumn>

                <GridColumn HeaderText="SCSI" Field="@nameof(ComputerModel.SCSIFirstPart)" Width="120px">
                    <EditTemplate Context="context">
                        @if (context is ComputerModel computer)
                        {
                            <div class="flex flex-col space-y-4 flex-wrap">
                                <SfTextBox TValue="string" @bind-Value="computer.SCSIFirstPart"></SfTextBox>
                                <SfDropDownList TValue="string" TItem="string" Placeholder="Cell color" DataSource="@color" @bind-Value="computer.SelectedSCSIcolor">
                                    <DropDownListFieldSettings Value="color" Text="Text"></DropDownListFieldSettings>
                                </SfDropDownList>
                            </div>
                        }
                    </EditTemplate>
                </GridColumn>

        <GridColumn Field="@nameof(ComputerModel.StatusFirstPart)" AllowSearching="false" HeaderText="Status / Notes" Width="500">

          <Template>

            @{
              string fullText = (context as ComputerModel).StatusFirstPart;

              // Match the date pattern (assuming date is in yyyy-MM-dd format)
              var datePattern = @"(\d{1,2}/\d{1,2}/\d{2})";
              var matches = Regex.Matches(fullText, datePattern);


              if (matches.Count > 0)
              {
                var lastIndex = 0; // To keep track of where we are in the string

                <div>
                  @foreach (Match match in matches)
                  {
                    // Get the part before the current match
                    var beforeDate = fullText.Substring(lastIndex, match.Index - lastIndex);

                    // Display the text before the date
                    @beforeDate
                    <br />
                    // Display the date as bold and add a line break after each date
                    <strong>@match.Value</strong>


                    // Update the last index to the end of the current match
                    lastIndex = match.Index + match.Length;
                  }


                  @fullText.Substring(lastIndex)
                </div>
              }
              else
              {
                // No date found, just display the text as-is
                <div>@fullText</div>
              }
            }
          </Template>
          <EditTemplate Context="context">
            @if (context is ComputerModel computer)
            {
              <div class="flex flex-col space-y-4 flex-wrap">
                <SfTextBox TValue="string" @bind-Value="computer.StatusFirstPart"></SfTextBox>
                <SfDropDownList TValue="string" TItem="string" Placeholder="Cell color" DataSource="@color" @bind-Value="computer.SelectedStatuscolor">
                  <DropDownListFieldSettings Value="color" Text="Text"></DropDownListFieldSettings>
                </SfDropDownList>
              </div>
            }
          </EditTemplate>
        </GridColumn>
      </GridColumns>
    </SfGrid>
  </div>

  <SfToast ID="InventoryToast" @ref="ToastObj" Timeout="2000">
    <ToastPosition X="Right" Y="Bottom"></ToastPosition>
    <ToastAnimation Show="SlideBottomIn" Hide="SlideRightOut"></ToastAnimation>
  </SfToast>
</div>

<link href="css/customScrollPlugin.css" rel="stylesheet" />
<script src="js/customScrollPlugin.js" defer async></script>

@code {
  int Count { get; set; } = 0;
  private string DialogButtonCaption { get; set; }
  private SfUploader Uploader;
  private string[] carouselImages = Array.Empty<string>();
  private SfGrid<ComputerModel> SfComputerGrid { get; set; }
  private bool VisibleProp { get; set; } = false;
  private List<ComputerModel> computerData = new();
  public ComputerModel ComputerModel = new();
  private List<string> toolbar = new List<string>();
  private List<string> color = new List<string> { "Yellow", "Green", "Red", "Orange", "Blue", "Cyan", "Magenta", "None" };
  private List<string> scope = new List<string> { "Row", "Cell" };
  private int deleteId;
  private List<string> imageUrls = new List<string>();
  private List<string> tempImagePaths = new List<string>();
  private bool isImageUploading = false;
  private ApplicationRoles permissions = new ApplicationRoles();
  private bool hasDeletingAccessPermission;
  private bool hasEditingAccessPermission;
  private bool hasViewingAccessPermission;
  private bool hasFullAccessPermission;
  private bool hasAddingAccessPermission;
  private ComputerModel selectedComputerInventoryModel;
  private List<ComputerModel> selectedRecords = new List<ComputerModel>();
  private string selectedImageUrl;
  private string colorValue { get; set; } = "#FFFFFF";
  private string colorValue1 { get; set; } = "#FFFFFF";

  public async Task BeforeSearchHandler(SearchingEventArgs args)
  {
    args.SearchText = args.SearchText.Replace(":", "");
  }

  public void ValueChange(ColorPickerEventArgs args)
  {
    colorValue = args.CurrentValue.Hex;
  }

  public void ValueChange1(ColorPickerEventArgs args)
  {
    colorValue1 = args.CurrentValue.Hex;
  }

  public async Task CellSelectedHandler(CellSelectEventArgs<ComputerModel> args)
  {
    var rowindex = args.RowIndex;
    var index = args.CellIndex;

    await JS.InvokeVoidAsync("highlightcell", index, rowindex, colorValue1);
  }

  private async void OnRowSelected(RowSelectEventArgs<ComputerModel> args)
  {
    var rowIndex = args.RowIndex;

    await JS.InvokeVoidAsync("highlightRow1", rowIndex, colorValue);
    selectedComputerInventoryModel = args.Data;
    selectedRecords = await SfComputerGrid.GetSelectedRecordsAsync();
    //Console.WriteLine($"Selected Computer Model: {selectedComputerInventoryModel}");
  }

  private void ToggleImageSelection(string imageUrl)
  {
    if (selectedImageUrl == imageUrl)
    {
      selectedImageUrl = null;
    }
    else
    {
      selectedImageUrl = imageUrl;
    }
  }
  public async Task DataBoundHandler()
  {
    await RefreshTopScroll();
  }

  public async Task RefreshTopScroll()
  {
    await JS.InvokeVoidAsync("Scroll");
  }
  private async Task DuplicateRecord(ComputerModel selectedComputerInventory)
  {
    if (selectedComputerInventory == null)
    {
      return;
    }

    string userId = await GetCurrentUserIdAsync();
    string userName = await GetCurrentUserNameAsync();

    var result = await ComputerService.DuplicateComputerAsync(selectedComputerInventory.Id);
    if (result == (int)HttpStatusCode.OK)
    {
      await ShowToast($"Record Duplicated Successfully.", "success");

      string crudOperationMessage = $"Record Duplicated in Computer Inventory";
      await UserLogsService.LogActivityAsync(new UserLogsModel
            {
                UserId = userId,
                UserName = userName,
                CrudOperation = crudOperationMessage,
            });

      computerData = await ComputerService.GetComputerAsync();
      await SfComputerGrid.Refresh();
      //Console.WriteLine("Grid Refreshed");
    }
    else
    {
      await ShowToast($"Failed to Duplicate Record.", "error");
    }
  }

  private async Task<string> GetCurrentUserIdAsync()
  {
    var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
    var user = authState.User;
    return user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
  }

  private async Task<string> GetCurrentUserNameAsync()
  {
    var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
    var user = authState.User;
    return user.Identity.Name;
  }

  protected override async Task OnInitializedAsync()
  {
    computerData = (await ComputerService.GetComputerAsync()).ToList();
    foreach (var item in computerData)
    {
      item.ParseTag();
      item.ParseProperties(); // Parse other properties as well
    }
    await LoadPermissions();
    SetupToolbar();

    VisibleProp = true;

    //Console.WriteLine("computer data loaded: " + computerData.Count + " items.");
  }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender)
    {
      await JS.InvokeVoidAsync("setPageTitle", "Computer Inventory");
    }
  }

  private void SetupToolbar()
  {
    toolbar.Clear();
    if (hasAddingAccessPermission || hasFullAccessPermission)
    {
      toolbar.Add("Add");
      toolbar.Add("Duplicate"); // Add the Duplicate button to the toolbar
    }
    if (hasEditingAccessPermission || hasFullAccessPermission)
    {
      toolbar.Add("Edit");
      if (!isImageUploading)
      {
        toolbar.Add("Update");
      }
    }
    // if (hasDeletingAccessPermission || hasFullAccessPermission)
    // {
    //   toolbar.Add("Delete");
    // }
    if (hasAddingAccessPermission || hasEditingAccessPermission || hasFullAccessPermission)
    {
      toolbar.Add("Cancel");
    }
    toolbar.Add("Search");
    toolbar.Add("ExcelExport");
    toolbar.Add("PdfExport");
  }

  private void UpdateTag(ComputerModel computer)
  {
    computer.UpdateTag();
  }

  public void CustomizeCell(QueryCellInfoEventArgs<ComputerModel> args)
  {
    if (args?.Data == null || args.Column == null)
    {
      return;
    }

    void ApplyCellStyle(string selectedcolor)
    {
      if (string.IsNullOrEmpty(selectedcolor) || selectedcolor == "none")
      {
        return;
      }

      //Console.WriteLine($"Applying color {selectedcolor} to cell");

      switch (selectedcolor)
      {
        case "Yellow":
          args.Cell.AddClass(new string[] { "color-yellow" });
          break;
        case "Green":
          args.Cell.AddClass(new string[] { "color-green" });
          break;
        case "Red":
          args.Cell.AddClass(new string[] { "color-red" });
          break;
        case "Orange":
          args.Cell.AddClass(new string[] { "color-orange" });
          break;
        case "Blue":
          args.Cell.AddClass(new string[] { "color-blue" });
          break;
        case "Cyan":
          args.Cell.AddClass(new string[] { "color-cyan" });
          break;
        case "Magenta":
          args.Cell.AddClass(new string[] { "color-magenta" });
          break;
      }
      // Debugging: Print a message indicating the color was applied
      // Console.WriteLine($"Color {selectedcolor} applied to cell.");
    }

    if (args.Column.Field == nameof(ComputerModel.TagFirstPart))
    {
      ApplyCellStyle(args.Data.SelectedTagcolor);
    }
    else if (args.Column.Field == nameof(ComputerModel.ImagePaths))
    {
      ApplyCellStyle(args.Data.SelectedImagecolor);
    }
    else if (args.Column.Field == nameof(ComputerModel.LocationFirstPart))
    {
      ApplyCellStyle(args.Data.SelectedLocationcolor);
    }
    else if (args.Column.Field == nameof(ComputerModel.ComputerNameFirstPart))
    {
      ApplyCellStyle(args.Data.SelectedComputerNamecolor);
    }
    else if (args.Column.Field == nameof(ComputerModel.QtyFirstPart))
    {
      ApplyCellStyle(args.Data.SelectedQtycolor);
    }
    else if (args.Column.Field == nameof(ComputerModel.PinFirstPart))
    {
      ApplyCellStyle(args.Data.SelectedPincolor);
    }
    else if (args.Column.Field == nameof(ComputerModel.HardDriveFirstPart))
    {
      ApplyCellStyle(args.Data.SelectedHardDrivecolor);
    }
    else if (args.Column.Field == nameof(ComputerModel.MemoryFirstPart))
    {
      ApplyCellStyle(args.Data.SelectedMemorycolor);
    }
    else if (args.Column.Field == nameof(ComputerModel.PlayerFirstPart))
    {
      ApplyCellStyle(args.Data.SelectedPlayercolor);
    }
    else if (args.Column.Field == nameof(ComputerModel.NetworkFirstPart))
    {
      ApplyCellStyle(args.Data.SelectedNetworkcolor);
    }
    else if (args.Column.Field == nameof(ComputerModel.SASRaidFirstPart))
    {
      ApplyCellStyle(args.Data.SelectedSASRaidcolor);
    }
    else if (args.Column.Field == nameof(ComputerModel.BarCodesFirstPart))
    {
      ApplyCellStyle(args.Data.SelectedBarCodescolor);
    }
    else if (args.Column.Field == nameof(ComputerModel.StatusFirstPart))
    {
      ApplyCellStyle(args.Data.SelectedStatuscolor);
    }
    else if (args.Column.Field == nameof(ComputerModel.VideoFirstPart))
    {
      ApplyCellStyle(args.Data.SelectedVideocolor);
    }
    else if (args.Column.Field == nameof(ComputerModel.FiberFirstPart))
    {
      ApplyCellStyle(args.Data.SelectedFibercolor);
    }
    else if (args.Column.Field == nameof(ComputerModel.IEEEFirstPart))
    {
      ApplyCellStyle(args.Data.SelectedIEEEcolor);
    }
        else if (args.Column.Field == nameof(ComputerModel.ProcessorsFirstPart))
        {
            ApplyCellStyle(args.Data.SelectedProcessorscolor);
        }
    else if (args.Column.Field == nameof(ComputerModel.SCSIFirstPart))
    {
      ApplyCellStyle(args.Data.SelectedSCSIcolor);
    }
        else if (args.Column.Field == nameof(ComputerModel.SelectedWindowsrcolor))
        {
            ApplyCellStyle(args.Data.SelectedWindowsrcolor);
        }
    }

    public void CustomizeRow(RowDataBoundEventArgs<ComputerModel> args)
    {
        if (args?.Data == null)
        {
            return;
        }

        if (string.IsNullOrEmpty(args.Data.SelectedTagScope) || args.Data.SelectedTagScope == "none")
        {
            return;
        }

        if (args.Data.SelectedTagScope == "Row")
        {
            if (string.IsNullOrEmpty(args.Data.SelectedTagcolor) || args.Data.SelectedTagcolor == "none")
            {
                return;
            }

            switch (args.Data.SelectedTagcolor)
            {
                case "Yellow":
                    args.Row.AddClass(new string[] { "color-yellow" });
                    break;
                case "Green":
                    args.Row.AddClass(new string[] { "color-green" });
                    break;
                case "Red":
                    args.Row.AddClass(new string[] { "color-red" });
                    break;
                case "Orange":
                    args.Row.AddClass(new string[] { "color-orange" });
                    break;
                case "Blue":
                    args.Row.AddClass(new string[] { "color-blue" });
                    break;
                case "Cyan":
                    args.Row.AddClass(new string[] { "color-cyan" });
                    break;
                case "Magenta":
                    args.Row.AddClass(new string[] { "color-magenta" });
                    break;
            }
        }
    }

    private async Task LoadPermissions()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            var identityUser = await UserManager.GetUserAsync(user);
            var roles = await UserManager.GetRolesAsync(identityUser);
            var permissions = await GetPermissionsFromRoles(roles);

            //Console.WriteLine($"User: {identityUser.UserName}, Permissions: {string.Join(", ", permissions)}");

            hasFullAccessPermission = permissions.Contains("Full Access");
            hasEditingAccessPermission = permissions.Contains("Computer Edit");
            hasAddingAccessPermission = permissions.Contains("Computer Add");
            hasDeletingAccessPermission = permissions.Contains("Computer Delete");
            hasViewingAccessPermission = permissions.Contains("Computer View");

            StateHasChanged();
        }
    }

    private async Task<List<string>> GetPermissionsFromRoles(IList<string> roles)
    {
        var permissions = new List<string>();
        foreach (var role in roles)
        {
            var applicationRole = await RoleManager.FindByNameAsync(role);
            if (applicationRole != null)
            {
                permissions.AddRange(applicationRole.Permissions);
            }
        }
        return permissions.Distinct().ToList();
    }

    private SfToast ToastObj;
    private List<ToastModel> ToastModels { get; set; } = new List<ToastModel>();

    private async Task ShowToast(string message, string type)
    {
        var toastModel = new ToastModel
        {
            Content = message,
            Icon = "e-layers"
        };
        ToastModels.Add(toastModel);
        await ToastObj.ShowAsync(toastModel);
    }

public async Task ActionBeginHandler(ActionEventArgs<ComputerModel> args)
{
    try
    {
        string action = string.Empty;
        string userId = await GetCurrentUserIdAsync();
        string userName = await GetCurrentUserNameAsync();

        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {
            if (args.Action == "Add" || args.Action == "Edit")
            {
                List<string> finalImagePaths = new List<string>();

                if (args.Data.ImagePaths != null && args.Data.ImagePaths.Count > 0)
                {
                    finalImagePaths.AddRange(args.Data.ImagePaths);
                }

                // Ensure only three images are stored
                int imagesToUpload = Math.Min(tempImagePaths.Count, 3 - finalImagePaths.Count);

                for (int i = 0; i < imagesToUpload; i++)
                {
                    var tempPath = tempImagePaths[i];

                    // Upload to Cloudinary
                    using (var stream = new FileStream(tempPath, FileMode.Open))
                    {
                        var result = await ComputerService.UploadFileToCloudinaryAsync(stream, args.Data, i + 1);
                        if (result != null)
                        {
                            finalImagePaths.Add(result);
                            await ShowToast($"Image Uploaded Successfully to Cloudinary.", "success");
                        }
                        else
                        {
                            await ShowToast($"Failed to upload image to Cloudinary.", "error");
                        }
                    }
                }

                // Ensure only three image URLs are stored
                finalImagePaths = finalImagePaths.Take(3).ToList();
                args.Data.ImagePaths = finalImagePaths;
                tempImagePaths.Clear();

                // Log the final image paths before updating all properties
                Console.WriteLine($"Final Image Paths before UpdateAllProperties: {string.Join(",", args.Data.ImagePaths)}");

                // Update all properties before saving
                args.Data.UpdateAllProperties();

                // Log the image paths after updating all properties
                Console.WriteLine($"Image Paths after UpdateAllProperties: {string.Join(",", args.Data.ImagePaths)}");

                await ComputerService.AddOrUpdateComputerAsync(args.Data);
                computerData = (await ComputerService.GetComputerAsync()).ToList();

                // Extract current image URLs from the computer model
                List<string> currentImageUrls = args.Data.ImagePaths ?? new List<string>();
                List<string> imagesToDelete = finalImagePaths.Except(currentImageUrls).ToList();

                // Log the values for debugging
                Console.WriteLine("Current Image URLs: " + string.Join(", ", currentImageUrls));
                Console.WriteLine("Final Image Paths: " + string.Join(", ", finalImagePaths));
                Console.WriteLine("Images to Delete: " + string.Join(", ", imagesToDelete));

                foreach (var imageUrl in imagesToDelete)
                {
                    bool isDeletedFromCloudinary = await ComputerService.DeleteFileFromCloudinaryAsync(imageUrl);
                    if (isDeletedFromCloudinary)
                    {
                        await ShowToast($"Image Deleted Successfully from Cloudinary", "success");
                    }
                    else
                    {
                        await ShowToast($"Failed to delete image from Cloudinary", "error");
                    }
                }

                if (args.Action == "Add")
                {
                    NavigationManager.NavigateTo("/ComputerInventory", true);
                }

                await ShowToast($"Record {args.Action}ed Successfully", "success");
            }
        }
        else if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Delete))
        {
            foreach (var record in selectedRecords)
            {
                var deleteId = record.Id;
                await ComputerService.DeleteComputerAsync(deleteId);

                if (record.ImagePaths != null && record.ImagePaths.Count > 0)
                {
                    foreach (var imageUrl in record.ImagePaths)
                    {
                        bool isDeleted = await ComputerService.DeleteFileFromCloudinaryAsync(imageUrl);
                        if (!isDeleted)
                        {
                            Console.WriteLine($"Failed to delete image from Cloudinary: {imageUrl}");
                        }
                    }
                }
            }

            await ShowToast("Records Deleted Successfully", "success");
        }

        if (args.Action != null)
        {
            if (args.Action == "Add")
            {
                action = "Added";
            }
            else if (args.Action == "Edit")
            {
                action = "Edited";
            }
            else if (args.Action == "Delete")
            {
                action = "Deleted";
            }
            string crudOperationMessage = $"Record {action} in Computer Inventory";
            await UserLogsService.LogActivityAsync(new UserLogsModel
            {
                UserId = userId,
                UserName = userName,
                CrudOperation = crudOperationMessage,
            });
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine($"An error occurred in ActionBeginHandler: {ex.Message}");
        Console.WriteLine($"Stack Trace: {ex.StackTrace}");
        await ShowToast("Operation failed", "error");
    }
}

    private async Task Save(MouseEventArgs args)
    {
        await SfComputerGrid.EndEditAsync();
        ComputerModel = await ComputerService.GetComputerByIdAsync(ComputerModel.Id); // Update the ComputerModel after save
    }

    private async Task Cancel(MouseEventArgs args)
    {
        await SfComputerGrid.CloseEditAsync();
        ComputerModel = await ComputerService.GetComputerByIdAsync(ComputerModel.Id); // Update the ComputerModel after cancel
    }

    public async void TooBarBtnClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Id.Contains("SfComputerGrid_excelexport"))
        {
            ExcelExportProperties exportProperties = new ExcelExportProperties
            {
                FileName = $"ComputerInventory_{DateTime.Now:yyyyMMdd_HHmm}.xlsx" // Custom filename with timestamp
            };
            await SfComputerGrid.ExportToExcelAsync(exportProperties);
        }
        else if (args.Item.Id.Contains("SfComputerGrid_pdfexport"))
        {
            PdfExportProperties exportProperties = new PdfExportProperties
            {
                PageOrientation = Syncfusion.Blazor.Grids.PageOrientation.Landscape,
                FileName = $"ComputerInventory_{DateTime.Now:yyyyMMdd_HHmm}.pdf" // Custom filename with timestamp
            };
            await SfComputerGrid.ExportToPdfAsync(exportProperties);
        }
        else if (args.Item.Id.Contains("_Update"))
        {
            await SfComputerGrid.EndEditAsync();
        }
        else if (args.Item.Text == "Duplicate")
        {
            var selectedComputerInventory = (await SfComputerGrid.GetSelectedRecords()).FirstOrDefault();
            if (selectedComputerInventory != null)
            {
                await DuplicateRecord(selectedComputerInventory);
            }
        }
    }

    private void Change()
    {
        if (isImageUploading)
        {
            this.SfComputerGrid.EnableToolbarItemsAsync(new List<string>() { "Update" }, false);
        }
        else
        {
            this.SfComputerGrid.EnableToolbarItemsAsync(new List<string>() { "Update" }, true);
        }
    }

        private async Task CloudinaryImageUpload(UploadChangeEventArgs args, ComputerModel computerModel)
    {
        const long maxAllowedSize = 10485760; // 10 MB

        try
        {
            if (args.Files != null && args.Files.Count > 0)
            {
                var file = args.Files[0];
                using (var stream = file.File.OpenReadStream(maxAllowedSize))
                {
                    if (stream.Length > maxAllowedSize)
                    {
                        await ShowToast("File size exceeds the 10 MB limit.", "error");
                        return;
                    }

                    // Upload to Cloudinary
                    var result = await ComputerService.UploadFileToCloudinaryAsync(stream, computerModel, 1);
                    if (result != null)
                    {
                        // Add the new image URL to the computerModel model
                        computerModel.AddImagePath(result);

                        // Update the computerModel model in memory, but do not save to the database yet
                        await ShowToast($"Image Uploaded Successfully to Cloudinary.", "success");
                    }
                    else
                    {
                        await ShowToast($"Failed to upload image to Cloudinary.", "error");
                    }
                }
            }
        }
        catch (Exception ex)
        {
            await ShowToast($"Error uploading file: {ex.Message}", "error");
            Console.WriteLine($"Error uploading file: {ex}");
        }
    }

    private async Task RemoveImage(string imageUrl, ComputerModel computerModel)
    {
        if (computerModel == null)
        {
            Console.WriteLine("Computer model is null.");
            return;
        }

        try
        {
            List<string> imageUrls = computerModel.ImagePaths ?? new List<string>();

            if (imageUrls.Contains(imageUrl))
            {
                // Remove the image URL from the list
                imageUrls.Remove(imageUrl);

                // Ensure only three image URLs are stored
                imageUrls = imageUrls.Take(3).ToList();
                computerModel.ImagePaths = imageUrls;

                // Call UpdateImages to reflect changes in _images
                computerModel.UpdateImages();

                // Persist changes to the database
                await ComputerService.AddOrUpdateComputerAsync(computerModel);
                await ShowToast($"Image removed successfully.", "success");

                // Delete the image from Cloudinary
                bool isDeletedFromCloudinary = await ComputerService.DeleteFileFromCloudinaryAsync(imageUrl);
                if (isDeletedFromCloudinary)
                {
                    Console.WriteLine($"Image {imageUrl} deleted from Cloudinary.");
                    await ShowToast($"Image Deleted Successfully from Cloudinary", "success");
                }
                else
                {
                    await ShowToast($"Failed to delete image from Cloudinary", "error");
                    Console.WriteLine($"Failed to delete image from Cloudinary: {imageUrl}");
                }
            }
            else
            {
                await ShowToast($"Image URL not found in the computer.", "error");
            }
        }
        catch (Exception ex)
        {
            await ShowToast($"Error removing image: {ex.Message}", "error");
            Console.WriteLine($"Error removing image: {ex}");
        }
    }

    private string GetDialogHeaderText(ComputerModel ComputerModel)
    {
        return ComputerModel?.Id == 0 ? "Add New computer" : $"Edit {ComputerModel.ComputerName}";
    }

    private void OpenCarousel(string[] images)
    {
        carouselImages = images;
        JS.InvokeVoidAsync("openModal");
    }
}

<style>
    #wrapper1 {
    overflow-x: scroll;
        overflow-y: hidden;
        height: 20px;
    }

     /* Define the font size*/
    .e-grid .e-headercelldiv {
        font-size: 15px;
    }

    .e-grid .e-rowcell {
        font-size: 15px;
    }

/* Define color classes */
.color-yellow {
    background-color: #F6FB7A;
}

.color-green {
    background-color: #B4E380;
}

.color-red {
    background-color: #FF6969;
}

.color-orange {
    background-color: #FFD580;
}

.color-blue {
    background-color: #ADD8E6;
}

.color-cyan {
    background-color: #E0FFFF;
}

.color-magenta {
    background-color: #FFB3FF;
}

/* Apply colors on row hover */
.e-grid .e-gridcontent .e-row:hover .e-rowcell.color-yellow {
    background-color: #F6FB7A !important;
}

.e-grid .e-gridcontent .e-row:hover .e-rowcell.color-green {
    background-color: #B4E380 !important;
}

.e-grid .e-gridcontent .e-row:hover .e-rowcell.color-red {
    background-color: #FF6969 !important;
}

.e-grid .e-gridcontent .e-row:hover .e-rowcell.color-orange {
    background-color: #FFD580 !important;
}

.e-grid .e-gridcontent .e-row:hover .e-rowcell.color-blue {
    background-color: #ADD8E6 !important;
}

.e-grid .e-gridcontent .e-row:hover .e-rowcell.color-cyan {
    background-color: #E0FFFF !important;
}

.e-grid .e-gridcontent .e-row:hover .e-rowcell.color-magenta {
    background-color: #FFB3FF !important;
}

/* Apply colors when the row is selected */
.e-grid .e-gridcontent .e-row .e-rowcell.color-yellow.e-selectionbackground {
    background-color: #F6FB7A !important;
}

.e-grid .e-gridcontent .e-row .e-rowcell.color-green.e-selectionbackground {
    background-color: #B4E380 !important;
}

.e-grid .e-gridcontent .e-row .e-rowcell.color-red.e-selectionbackground {
    background-color: #FF6969 !important;
}

.e-grid .e-gridcontent .e-row .e-rowcell.color-orange.e-selectionbackground {
    background-color: #FFD580 !important;
}

.e-grid .e-gridcontent .e-row .e-rowcell.color-blue.e-selectionbackground {
    background-color: #ADD8E6 !important;
}

.e-grid .e-gridcontent .e-row .e-rowcell.color-cyan.e-selectionbackground {
    background-color: #E0FFFF !important;
}

.e-grid .e-gridcontent .e-row .e-rowcell.color-magenta.e-selectionbackground {
    background-color: #FFB3FF !important;
}

</style>

<div id="imageCarouselModal" class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50" style="display: none;">
    <div class="bg-white p-6 rounded-lg w-3/4 h-3/4 mx-auto relative">
        <span class="close cursor-pointer float-right hover:scale-105 ease-in transition-all duration-300" onclick="closeModal()"><i class="fa-regular fa-circle-xmark text-indigo-600 text-2xl"></i></span>
        <div class="control-container flex justify-center items-center h-full">
            <SfCarousel AnimationEffect="CarouselAnimationEffect.Fade">
                @foreach (var image in carouselImages)
                {
                                    <CarouselItem>
                                        <figure class="img-container mx-auto w-3/4 h-full p-6">
                                            <img src="@image" alt="Image" class="w-full h-full object-contain" />
                                        </figure>
                                    </CarouselItem>
                }
            </SfCarousel>
        </div>
    </div>
</div>

<script>
    function openModal() {
        document.getElementById('imageCarouselModal').style.display = 'flex';
    }

    function closeModal() {
        document.getElementById('imageCarouselModal').style.display = 'none';
    }
</script>